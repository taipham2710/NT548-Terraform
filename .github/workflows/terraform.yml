name: Terraform CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    
    defaults:
      run:
        shell: bash
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Generate SSH Key Pair
      run: |
        ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
        chmod 600 ~/.ssh/id_rsa
        chmod 644 ~/.ssh/id_rsa.pub

    - name: Upload SSH Key Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ssh-key-${{ github.sha }}
        path: |
          ~/.ssh/id_rsa
          ~/.ssh/id_rsa.pub
        retention-days: 5
    
    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Install Checkov
      run: |
        python -m pip install --upgrade pip
        pip install checkov

    - name: Run Checkov Security Scan
      run: |
        checkov -d . --framework terraform --output cli --compact --quiet --download-external-modules true --skip-path test/ > checkov-results.txt
        cat checkov-results.txt

    - name: Upload Checkov Results
      uses: actions/upload-artifact@v4
      with:
        name: checkov-results-${{ github.sha }}
        path: checkov-results.txt
        retention-days: 5

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color -input=false -out=tfplan
        terraform show -no-color tfplan > plan.txt
      continue-on-error: true

    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ github.sha }}
        path: |
          tfplan
          plan.txt
        retention-days: 5

    - name: Comment PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('plan.txt', 'utf8');
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>

          \`\`\`
          ${plan}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform-plan
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    defaults:
      run:
        shell: bash
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download SSH Key Artifact
      uses: actions/download-artifact@v4
      with:
        name: ssh-key-${{ github.sha }}
        path: ~/.ssh

    - name: Set permissions for SSH key
      run: |
        chmod 600 ~/.ssh/id_rsa
        chmod 644 ~/.ssh/id_rsa.pub

    - name: Download Plan Artifact
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-${{ github.sha }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan

    - name: Get Terraform Outputs
      id: outputs
      run: |
        echo "public_ip=$(terraform output -raw public_instance_ip)" >> $GITHUB_OUTPUT
        echo "private_ip=$(terraform output -raw private_instance_ip)" >> $GITHUB_OUTPUT
        echo "vpc_id=$(terraform output -raw vpc_id)" >> $GITHUB_OUTPUT

    - name: Create Deployment Summary
      run: |
        echo "# Deployment Summary üöÄ" >> $GITHUB_STEP_SUMMARY
        echo "## Infrastructure Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Public Instance IP:** ${{ steps.outputs.outputs.public_ip }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Private Instance IP:** ${{ steps.outputs.outputs.private_ip }}" >> $GITHUB_STEP_SUMMARY
        echo "- **VPC ID:** ${{ steps.outputs.outputs.vpc_id }}" >> $GITHUB_STEP_SUMMARY
        echo "- **AWS Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Time:** $(date)" >> $GITHUB_STEP_SUMMARY

  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    environment: destruction
    if: github.event_name == 'workflow_dispatch'
    
    defaults:
      run:
        shell: bash
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Generate SSH Key Pair
      run: |
        ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
        chmod 600 ~/.ssh/id_rsa
        chmod 644 ~/.ssh/id_rsa.pub

    - name: Terraform Init
      run: terraform init

    - name: Terraform Destroy
      run: terraform destroy -auto-approve